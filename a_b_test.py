import numpy as np
import matplotlib.pyplot as plt
from scipy import stats
import seaborn as sns

# –°–ª—É—á–∞–π–Ω–æ—Å—Ç—å, –Ω–æ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º seed –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
np.random.seed(42)

# –ß–∏—Å–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø–µ
n_users = 10000

# –ó–∞–¥–∞—ë–º —Ä–µ–∞–ª—å–Ω—É—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
true_conv_rates = {
    'A': 0.05,
    'B': 0.065,
    'C': 0.06
}

# –°–∏–º—É–ª–∏—Ä—É–µ–º: –ø–æ–∫—É–ø–∫–∞ (1) –∏–ª–∏ –Ω–µ—Ç (0)
data = {
    group: np.random.binomial(1, prob, n_users)
    for group, prob in true_conv_rates.items()
}

# –ü–æ—Å—á–∏—Ç–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
conversions = {group: np.mean(actions) for group, actions in data.items()}
print("–ö–æ–Ω–≤–µ—Ä—Å–∏–∏:")
for group, conv in conversions.items():
    print(f"{group}: {conv:.2%}")

# üìä –ü–æ—Å—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫
sns.barplot(x=list(conversions.keys()), y=list(conversions.values()))
plt.ylabel('–ö–æ–Ω–≤–µ—Ä—Å–∏—è')
plt.title('–ö–æ–Ω–≤–µ—Ä—Å–∏–∏ –ø–æ –≥—Ä—É–ø–ø–∞–º A/B/C')
plt.ylim(0, 0.08)
plt.show()

# üß™ –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ: A vs B, A vs C, B vs C
def z_test(group1, group2):
    successes = [np.sum(data[group1]), np.sum(data[group2])]
    nobs = [n_users, n_users]
    z_stat, p_val = stats.proportions_ztest(successes, nobs)
    print(f"\n{group1} vs {group2}")
    print(f"Z-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {z_stat:.2f}")
    print(f"P-–∑–Ω–∞—á–µ–Ω–∏–µ: {p_val:.4f}")
    if p_val < 0.05:
        print("‚úÖ –†–∞–∑–ª–∏—á–∏—è –∑–Ω–∞—á–∏–º—ã")
    else:
        print("‚ö†Ô∏è –†–∞–∑–ª–∏—á–∏—è –ù–ï –∑–Ω–∞—á–∏–º—ã")

# –°—Ä–∞–≤–Ω–µ–Ω–∏—è
z_test('A', 'B')
z_test('A', 'C')
z_test('B', 'C')
